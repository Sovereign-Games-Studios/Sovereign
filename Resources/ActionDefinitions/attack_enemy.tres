[gd_resource type="Resource" load_steps=2 format=3 uid="uid://c1e3eckorl844"]

[sub_resource type="GDScript" id="GDScript_iptki"]
script/source = "extends Action
'''
Actions directly modify the npc to set in motion events based on a series of considerations. 
These are the \"leaf nodes\" of the behaviour tree. 

find_target:
	Selects the best target from the list of npc's currently colliding with the NPC's vision radius. 
	Once best target is found, sets the target and initiates combat. 
'''
# List of considerations for choosing this specific reasoner
var considerations = [\"personal_strength\", \"reward_flag\"]
var child_nodes = []
var type = \"ActionQueue\"

func consider(npc: NPC, kingdom_state: TeamState):
	var consideration_value = 0
	for consideration in considerations:
		var consider_node = kingdom_state.consider_list[consideration] 
		consideration_value += consider_node.calculate_consideration_value(npc, kingdom_state)
	consideration_value/considerations.size()
	return consideration_value  
	
func queue_actions(npc: NPC, kingdom_state: TeamState, mutex: Mutex):
	mutex.lock()
		# Find a valid enemy in range and set them as our target
	npc.action_queue.push_back(set_target)
	# Move within range of the target to begin attacking them
	npc.action_queue.push_back(move_to_target)	
	# Attack the target
	mutex.unlock()
	return \"SUCCESS\"
	
'''
TODO 
- Add a variable to store the best target so we don't do this twice
'''
func weigh_option(npc: NPC, kingdom_state: TeamState):
	var possible_reward_value
	var option_value
	var combat_exp_gain = 10
	var exp_gain_for_slaying = 0
	var gold_gain_for_slaying = 0
	var npc_pos = npc.global_transform.origin
	
	for enemy in kingdom_state.observed_enemies:
		var distance = npc_pos.distance_to(enemy.global_transform.origin)
		if enemy is NPC:
			var current_threat_value = (enemy.power ** (enemy.power - npc.power))/npc.personality.bravery
			# We get lazy if its far away.
			current_threat_value += distance 
			exp_gain_for_slaying = enemy.definition.exp_value
			gold_gain_for_slaying = (enemy.definition.max_drop + enemy.definition.min_drop)/2 
			var current_reward_value = exp_gain_for_slaying+(gold_gain_for_slaying * npc.personality.greed)
			if npc.reward_flag:
				current_reward_value += npc.reward_flag.value
			var current_option_value = current_reward_value - current_threat_value
			if current_option_value > option_value:
				option_value = current_option_value
				# TODO maybe implement this. 
				# npc.best_target = enemy
	return option_value
"

[resource]
script = SubResource("GDScript_iptki")
