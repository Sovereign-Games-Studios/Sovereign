[gd_resource type="Resource" load_steps=2 format=3 uid="uid://q23oytr1rtid"]

[sub_resource type="GDScript" id="GDScript_jfxgr"]
script/source = "extends Resource
'''
Behaviour Nodes take into account the current state of the NPC and it's environment to determine what
action if any should be taken at the present moment. These are the \"branch nodes\" of the behaviour tree.

engage_enemies:
	This node determines if enemies in the NPC's vision range should be engaged or not. If they should, 
	this will progress to the leaf node of find_target. 
'''

# List of considerations for choosing this specific option
var considerations = [\"personal_strength\"]

# Child node, can either be an action or another behaviour node. 
var child_nodes = [\"attack_enemy\"]
var type = \"OptionNode\"

func consider(npc: NPC, kingdom_state: TeamState):
	if npc.brain.enemies_in_range.size() == 0:
		return -10
	var consideration_value = 0
	for consideration in considerations:
		var consider_node = kingdom_state.consider_list[consideration]
		consideration_value += consider_node.calculate_consideration_value(npc, kingdom_state)
	consideration_value/considerations.size()
	return consideration_value + 1000

func weigh_option(npc: NPC, kingdom_state: TeamState):
	var possible_reward_value
	var option_value = 0
	var combat_exp_gain = 10
	var exp_gain_for_slaying = 0
	var gold_gain_for_slaying = 0
	var npc_pos = npc.global_transform.origin
	
	for enemy in kingdom_state.observed_enemies:
		var distance = npc_pos.distance_to(enemy.global_transform.origin)
		if enemy is NPC:
			var current_threat_value = (enemy.power ** (enemy.power - npc.power))/npc.personality.bravery
			# We get lazy if its far away.
			current_threat_value += distance 
			exp_gain_for_slaying = enemy.definition.exp_value
			gold_gain_for_slaying = (enemy.definition.max_drop + enemy.definition.min_drop)/2 
			var current_reward_value = exp_gain_for_slaying+(gold_gain_for_slaying * npc.personality.greed)
			if npc.reward_flag:
				current_reward_value += npc.reward_flag.value
			var current_option_value = current_reward_value - current_threat_value
			if current_option_value > option_value:
				option_value = current_option_value
				# TODO maybe implement this. 
				# npc.best_target = enemy
	return option_value
"

[resource]
script = SubResource("GDScript_jfxgr")
